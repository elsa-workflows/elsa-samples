services:
  # Elsa Studio and Server from a single image.
  elsa-server-and-studio:
    image: elsaworkflows/elsa-server-and-studio-v3:latest
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      HTTP_PORTS: 8080
      HTTP__BASEURL: http://localhost:14000
    ports:
      - "14000:8080"
  
  # Elsa Server only.
  elsa-server:
    image: elsaworkflows/elsa-server-v3:latest
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      HTTP_PORTS: 8080
      HTTP__BASEURL: http://localhost:12000
    ports:
      - "12000:8080"
  
  # Elsa Studio connected to Elsa Server.
  elsa-studio:
    image: elsaworkflows/elsa-studio-v3:latest
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      HTTP_PORTS: 8080
      HTTP__BASEURL: http://localhost:13000
      ELSASERVER__URL: http://localhost:12000/elsa/api
    ports:
      - "13000:8080"
  
  # Elsa Server and Studio behind Traefik.
  elsa-server-and-studio-behind-traefik:
    image: elsaworkflows/elsa-server-and-studio-v3:latest
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      HTTP_PORTS: 8080
      HTTP__BASEURL: http://elsa.localhost
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.elsa.rule=Host(`elsa.localhost`)"
      - "traefik.http.services.elsa.loadbalancer.server.port=8080"
    networks:
      - elsa-network
  
  # Traefik reverse proxy.
  traefik:
    image: traefik:2.7.2
    command:
      - "--api.insecure=true" # Enables the Traefik dashboard
      - "--providers.docker=true" # Enables Docker as the configuration source
      - "--entrypoints.web.address=:80" # Sets up the HTTP entry point on port 80
    ports:
      - "1280:80" # Expose HTTP port. Access Elsa Studio at: http://elsa.localhost:1280/
      - "8080:8080" # Expose Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock" # Allows Traefik to communicate with the Docker daemon
    networks:
      - elsa-network
      
networks:
  elsa-network:
    driver: bridge